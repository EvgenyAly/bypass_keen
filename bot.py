import asyncio
import subprocess
import os
import stat
import time
import telebot
from telebot import types
from telethon.sync import TelegramClient
import base64
import requests
import json
import bot_config as config

token = config.token
appapiid = config.appapiid
appapihash = config.appapihash
usernames = config.usernames
routerip = config.routerip
localportsh = config.localportsh

localporttrojan = config.localporttrojan
localportvless = config.localportvless

dnsovertlsport = config.dnsovertlsport
dnsoverhttpsport = config.dnsoverhttpsport

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
bot = telebot.TeleBot(token)
level = 0
bypass = -1
sid = "0"

# —Å–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–æ–≤ –¥–ª—è –º–µ–Ω—é
#  ‚úÖ ‚ùå ‚ôªÔ∏è üìÉ üìÜ üîë üìÑ ‚ùó Ô∏è‚ö†Ô∏è ‚öôÔ∏è üìù üìÜ üóë üìÑÔ∏è‚ö†Ô∏è üî∞ ‚ùî ‚ÄºÔ∏è üìë
@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.username not in usernames:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞')
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üî∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ")
    item2 = types.KeyboardButton("üîë –ö–ª—é—á–∏ –∏ –º–æ—Å—Ç—ã")
    item3 = types.KeyboardButton("üìù –°–ø–∏—Å–∫–∏ –æ–±—Ö–æ–¥–∞")
    item4 = types.KeyboardButton("‚öôÔ∏è –°–µ—Ä–≤–∏—Å")
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, '‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def bot_message(message):
    try:
        main = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m1 = types.KeyboardButton("üî∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ")
        m2 = types.KeyboardButton("üîë –ö–ª—é—á–∏ –∏ –º–æ—Å—Ç—ã")
        m3 = types.KeyboardButton("üìù –°–ø–∏—Å–∫–∏ –æ–±—Ö–æ–¥–∞")
        m4 = types.KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        m5 = types.KeyboardButton("‚öôÔ∏è –°–µ—Ä–≤–∏—Å")
        main.add(m1, m2, m3)
        main.add(m4, m5)

        service = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m1 = types.KeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
        m2 = types.KeyboardButton("‚ÄºÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä")
        m3 = types.KeyboardButton("‚ÄºÔ∏èDNS Override")
        m4 = types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        service.add(m1, m2)
        service.add(m3, m4)
        service.add(back)

        if message.from_user.username not in usernames:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞')
            return
        if message.chat.type == 'private':
            global level, bypass

            if message.text == '‚öôÔ∏è –°–µ—Ä–≤–∏—Å':
                bot.send_message(message.chat.id, '‚öôÔ∏è –°–µ—Ä–≤–∏—Å–Ω–æ–µ –º–µ–Ω—é!', reply_markup=service)
                return

            if message.text == '‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã' or message.text == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã':
                bot.send_message(message.chat.id, 'üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤!', reply_markup=service)
              
                os.system('/opt/etc/init.d/S22trojan restart')
                os.system('/opt/etc/init.d/S24v2ray restart')
              
                bot.send_message(message.chat.id, '‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!', reply_markup=service)
                return

            if message.text == '‚ÄºÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä' or message.text == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä':
                os.system("ndmc -c system reboot")
                service_router_reboot = "üîÑ –†–æ—É—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è!\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2 –º–∏–Ω—É—Ç."
                bot.send_message(message.chat.id, service_router_reboot, reply_markup=service)
                return

            if message.text == '‚ÄºÔ∏èDNS Override' or message.text == 'DNS Override':
                service = types.ReplyKeyboardMarkup(resize_keyboard=True)
                m1 = types.KeyboardButton("‚úÖ DNS Override –í–ö–õ")
                m2 = types.KeyboardButton("‚ùå DNS Override –í–´–ö–õ")
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                service.add(m1, m2)
                service.add(back)
                bot.send_message(message.chat.id, '‚ÄºÔ∏èDNS Override!', reply_markup=service)
                return

            if message.text == "‚úÖ DNS Override –í–ö–õ" or message.text == "‚ùå DNS Override –í–´–ö–õ":
                if message.text == "‚úÖ DNS Override –í–ö–õ":
                    os.system("ndmc -c 'opkg dns-override'")
                    time.sleep(2)
                    os.system("ndmc -c 'system configuration save'")
                    bot.send_message(message.chat.id, '‚úÖ DNS Override –≤–∫–ª—é—á–µ–Ω!\nüîÑ –†–æ—É—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.',
                                     reply_markup=service)
                    time.sleep(5)
                    os.system("ndmc -c 'system reboot'")
                    return

                if message.text == "‚ùå DNS Override –í–´–ö–õ":
                    os.system("ndmc -c 'no opkg dns-override'")
                    time.sleep(2)
                    os.system("ndmc -c 'system configuration save'")
                    bot.send_message(message.chat.id, '‚úÖ DNS Override –≤—ã–∫–ª—é—á–µ–Ω!\nüîÑ –†–æ—É—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.',
                                     reply_markup=service)
                    time.sleep(5)
                    os.system("ndmc -c 'system reboot'")
                    return

                service_router_reboot = "üîÑ –†–æ—É—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è!\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2 –º–∏–Ω—É—Ç."
                bot.send_message(message.chat.id, service_router_reboot, reply_markup=service)
                return

            if message.text == 'üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
                url = "https://raw.githubusercontent.com/ziwork/bypass_keenetic/main/info.md"
                info_bot = requests.get(url).text
                bot.send_message(message.chat.id, info_bot, parse_mode='Markdown', disable_web_page_preview=True,
                                 reply_markup=main)
                return

            if message.text == '/keys_free':
                url = "https://raw.githubusercontent.com/ziwork/bypass_keenetic/main/keys.md"
                keys_free = requests.get(url).text
                bot.send_message(message.chat.id, keys_free, parse_mode='Markdown', disable_web_page_preview=True)
                return

            if message.text == 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è' or message.text == '/check_update':
                url = "https://raw.githubusercontent.com/ziwork/bypass_keenetic/main/version.md"
                bot_new_version = requests.get(url).text

                with open('/opt/etc/bot.py', encoding='utf-8') as file:
                    for line in file.readlines():
                        if line.startswith('# –í–ï–†–°–ò–Ø –°–ö–†–ò–ü–¢–ê'):
                            s = line.replace('# ', '')
                            bot_version = s.strip()

                service_bot_version = "*–í–ê–®–ê –¢–ï–ö–£–©–ê–Ø " + str(bot_version) + "*\n\n"
                service_new_version = "*–ü–û–°–õ–ï–î–ù–Ø–Ø –î–û–°–¢–£–ü–ù–ê–Ø –í–ï–†–°–ò–Ø:*\n\n" + str(bot_new_version)
                service_update_info = service_bot_version + service_new_version
                # bot.send_message(message.chat.id, service_bot_version, parse_mode='Markdown', reply_markup=service)
                bot.send_message(message.chat.id, service_update_info, parse_mode='Markdown', reply_markup=service)

                service_update_msg = "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –±–æ–ª–µ–µ –Ω–æ–≤—É—é, –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ /update"
                bot.send_message(message.chat.id, service_update_msg, parse_mode='Markdown', reply_markup=service)
                return

            if message.text == '/update':
                bot.send_message(message.chat.id, '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!', reply_markup=service)
                os.system("curl -s -o /opt/root/script.sh https://raw.githubusercontent.com/ziwork/bypass_keenetic/main/script.sh")
                os.chmod(r"/opt/root/script.sh", 0o0755)
                os.chmod('/opt/root/script.sh', stat.S_IRWXU)

                update = subprocess.Popen(['/opt/root/script.sh', '-update'], stdout=subprocess.PIPE)
                for line in update.stdout:
                    results_update = line.decode().strip()
                    bot.send_message(message.chat.id, str(results_update), reply_markup=service)
                return

            if message.text == 'üîô –ù–∞–∑–∞–¥' or message.text == "–ù–∞–∑–∞–¥":
                bot.send_message(message.chat.id, '‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!', reply_markup=main)
                level = 0
                bypass = -1
                return

            if level == 1:
                # –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                dirname = '/opt/etc/unblock/'
                dirfiles = os.listdir(dirname)

                for fln in dirfiles:
                    if fln == message.text + '.txt':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        item1 = types.KeyboardButton("üìë –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
                        item2 = types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫")
                        item3 = types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
                        back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                        markup.row(item1, item2, item3)
                        markup.row(back)
                        level = 2
                        bypass = message.text
                        bot.send_message(message.chat.id, "–ú–µ–Ω—é " + bypass, reply_markup=markup)
                        return

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.add(back)
                bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω", reply_markup=markup)
                return

            if level == 2 and message.text == "üìë –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫":
                file = open('/opt/etc/unblock/' + bypass + '.txt')
                flag = True
                s = ''
                sites = []
                for line in file:
                    sites.append(line)
                    flag = False
                if flag:
                    s = '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
                file.close()
                sites.sort()
                if not flag:
                    for line in sites:
                        s = str(s) + '\n' + line.replace("\n", "")
                if len(s) > 4096:
                    for x in range(0, len(s), 4096):
                        bot.send_message(message.chat.id, s[x:x + 4096])
                else:
                    bot.send_message(message.chat.id, s)
                #bot.send_message(message.chat.id, s)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("üìë –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
                item2 = types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫")
                item3 = types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1, item2, item3)
                markup.row(back)
                bot.send_message(message.chat.id, "–ú–µ–Ω—é " + bypass, reply_markup=markup)
                return

            if level == 2 and message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫":
                bot.send_message(message.chat.id,
                                 "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–∞–π—Ç–∞ –∏–ª–∏ –¥–æ–º–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, "
                                 "–ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π")
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å–æ—Ü—Å–µ—Ç–µ–π")
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.add(item1, back)
                level = 3
                bot.send_message(message.chat.id, "–ú–µ–Ω—é " + bypass, reply_markup=markup)
                return

            if level == 2 and message.text == "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞":
                bot.send_message(message.chat.id,
                                 "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–∞–π—Ç–∞ –∏–ª–∏ –¥–æ–º–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ª–∏—Å—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏,"
                                 "–ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.add(back)
                level = 4
                bot.send_message(message.chat.id, "–ú–µ–Ω—é " + bypass, reply_markup=markup)
                return

            if level == 3:
                f = open('/opt/etc/unblock/' + bypass + '.txt')
                mylist = set()
                for line in f:
                    mylist.add(line.replace('\n', ''))
                f.close()
                k = len(mylist)
                if message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å–æ—Ü—Å–µ—Ç–µ–π":
                    url = "https://raw.githubusercontent.com/tas-unn/bypass_keenetic/main/socialnet.txt"
                    s = requests.get(url).text
                    lst = s.split('\n')
                    for line in lst:
                        if len(line) > 1:
                            mylist.add(line.replace('\n', ''))
                else:
                    if len(message.text) > 1:
                        mas = message.text.split('\n')
                        for site in mas:
                            mylist.add(site)
                sortlist = []
                for line in mylist:
                    sortlist.append(line)
                sortlist.sort()
                f = open('/opt/etc/unblock/' + bypass + '.txt', 'w')
                for line in sortlist:
                    f.write(line + '\n')
                f.close()
                if k != len(sortlist):
                    bot.send_message(message.chat.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                else:
                    bot.send_message(message.chat.id, "–ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("üìë –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
                item2 = types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫")
                item3 = types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1, item2, item3)
                markup.row(back)
                subprocess.call(["/opt/bin/unblock_update.sh"])
                level = 2
                bot.send_message(message.chat.id, "–ú–µ–Ω—é " + bypass, reply_markup=markup)
                return

            if level == 4:
                f = open('/opt/etc/unblock/' + bypass + '.txt')
                mylist = set()
                for line in f:
                    mylist.add(line.replace('\n', ''))
                f.close()
                k = len(mylist)
                mas = message.text.split('\n')
                for site in mas:
                    mylist.discard(site)
                f = open('/opt/etc/unblock/' + bypass + '.txt', 'w')
                for line in mylist:
                    f.write(line + '\n')
                f.close()
                if k != len(mylist):
                    bot.send_message(message.chat.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
                else:
                    bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("üìë –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
                item2 = types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫")
                item3 = types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1, item2, item3)
                markup.row(back)
                level = 2
                subprocess.call(["/opt/bin/unblock_update.sh"])
                bot.send_message(message.chat.id, "–ú–µ–Ω—é " + bypass, reply_markup=markup)
                return

            if level == 8:
                # –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∫–ª—é—á–∏ –∏ –º–æ—Å—Ç—ã
                if message.text == '–ì–¥–µ –±—Ä–∞—Ç—å –∫–ª—é—á–∏‚ùî':
                    url = "https://raw.githubusercontent.com/ziwork/bypass_keenetic/main/keys.md"
                    keys = requests.get(url).text
                    bot.send_message(message.chat.id, keys, parse_mode='Markdown', disable_web_page_preview=True)
                    level = 8

                if message.text == 'Vless':
                    #bot.send_message(message.chat.id, "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á —Å—é–¥–∞")
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                    markup.add(back)
                    level = 9
                    bot.send_message(message.chat.id, "üîë –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á —Å—é–¥–∞", reply_markup=markup)
                    return

                if message.text == 'Trojan':
                    #bot.send_message(message.chat.id, "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á —Å—é–¥–∞")
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                    markup.add(back)
                    level = 10
                    bot.send_message(message.chat.id, "üîë –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á —Å—é–¥–∞", reply_markup=markup)
                    return

            if level == 9:
                vless(message.text)
                os.system('/opt/etc/init.d/S24v2ray restart')
                level = 0
                bot.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=main)

            if level == 10:
                trojan(message.text)
                os.system('/opt/etc/init.d/S22trojan restart')
                level = 0
                bot.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=main)

            
            if message.text == 'üî∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("‚ôªÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ & –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞")
                item2 = types.KeyboardButton("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ")
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1, item2)
                markup.row(back)
                bot.send_message(message.chat.id, 'üî∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ', reply_markup=markup)
                return

            if message.text == '‚ôªÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ & –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
                item2 = types.KeyboardButton("Fork by NetworK")
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1, item2)
                markup.row(back)
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', reply_markup=markup)
                return

            if message.text == "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è" or message.text == "Fork by NetworK":
                if message.text == "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è":
                    repo = "tas-unn"
                else:
                    repo = "ziwork"

                # os.system("curl -s -o /opt/root/script.sh https://raw.githubusercontent.com/ziwork/bypass_keenetic/main/script.sh")
                url = "https://raw.githubusercontent.com/{0}/bypass_keenetic/main/script.sh".format(repo)
                os.system("curl -s -o /opt/root/script.sh " + url + "")
                os.chmod(r"/opt/root/script.sh", 0o0755)
                os.chmod('/opt/root/script.sh', stat.S_IRWXU)
                #os.system("sed -i 's/ziwork/" + repo + "/g' /opt/root/script.sh")

                install = subprocess.Popen(['/opt/root/script.sh', '-install'], stdout=subprocess.PIPE)
                for line in install.stdout:
                    results_install = line.decode().strip()
                    bot.send_message(message.chat.id, str(results_install), reply_markup=main)

                bot.send_message(message.chat.id,
                                 "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ "
                                 "—Å–ø–∏—Å–∫–∞–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫. "
                                 "–ö–ª—é—á–∏ –¥–ª—è Vless, –∏ Trojan –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é, ",
                                 reply_markup=main)

                bot.send_message(message.chat.id,
                                 "–ß—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–æ—É—Ç–µ—Ä–∞, –ó–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–µ—Ä–≤–∏—Å -> DNS Override -> –í–ö–õ. "
                                 "–£—á—Ç–∏—Ç–µ, –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, —Ä–æ—É—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è, —ç—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2 –º–∏–Ω—É—Ç.",
                                 reply_markup=main)

                subprocess.call(["/opt/bin/unblock_update.sh"])
                # os.system('/opt/bin/unblock_update.sh')
                return

            if message.text == '‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ':
                os.system("curl -s -o /opt/root/script.sh https://raw.githubusercontent.com/ziwork/bypass_keenetic/main/script.sh")
                os.chmod(r"/opt/root/script.sh", 0o0755)
                os.chmod('/opt/root/script.sh', stat.S_IRWXU)

                remove = subprocess.Popen(['/opt/root/script.sh', '-remove'], stdout=subprocess.PIPE)
                for line in remove.stdout:
                    results_remove = line.decode().strip()
                    bot.send_message(message.chat.id, str(results_remove), reply_markup=service)
                return

            if message.text == "üìù –°–ø–∏—Å–∫–∏ –æ–±—Ö–æ–¥–∞":
                level = 1
                dirname = '/opt/etc/unblock/'
                dirfiles = os.listdir(dirname)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markuplist = []
                for fln in dirfiles:
                    # markup.add(fln.replace(".txt", ""))
                    btn = fln.replace(".txt", "")
                    markuplist.append(btn)
                markup.add(*markuplist)
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.add(back)
                bot.send_message(message.chat.id, "üìù –°–ø–∏—Å–∫–∏ –æ–±—Ö–æ–¥–∞", reply_markup=markup)
                return

            if message.text == "üîë –ö–ª—é—á–∏ –∏ –º–æ—Å—Ç—ã":
                level = 8
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item3 = types.KeyboardButton("Vless")
                item4 = types.KeyboardButton("Trojan")
                markup.add(item1, item2)
                markup.add(item3, item4)
                markup.add(item5)
                back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.add(back)
                bot.send_message(message.chat.id, "üîë –ö–ª—é—á–∏ –∏ –º–æ—Å—Ç—ã", reply_markup=markup)
                return

    except Exception as error:
        file = open("/opt/etc/error.log", "w")
        file.write(str(error))
        file.close()
        os.chmod(r"/opt/etc/error.log", 0o0755)

def vless(key):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –≤–∏–¥–∞:
    vless://UUID@host:port?type=tcp&security=reality&pbk=PUBLIC_KEY&fp=chrome&sni=example.com&sid=SHORT_ID&spx=%2F&flow=xtls-rprx-vision#–∏–º—è
    
    –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:
    vless://68950405-f8b0-46e9-8985-a22a7ea487b5@194.226.49.194:443?
    type=tcp&security=reality&pbk=2Ddv9mu8e34G27-p6LZcK23pT_1hW9qIctqwpzjFMXs
    &fp=chrome&sni=yahoo.com&sid=9263f9&spx=%2F&flow=xtls-rprx-vision#youtube-3z3gu7as
    """
    import urllib.parse

    # –£–±–µ—Ä–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "vless://"
    raw = key.split("vless://")[1]  # "UUID@host:port?..." 

    # "UUID" –¥–æ –∑–Ω–∞–∫–∞ @
    uuid = raw.split('@')[0]

    # "host:port?type=...#..."
    after_host = raw.split('@')[1]

    # host:port ‚Äî –¥–æ –∑–Ω–∞–∫–∞ '?'
    host_port = after_host.split('?')[0]
    host = host_port.split(':')[0]
    port = host_port.split(':')[1] if ':' in host_port else '443'

    # –î–∞–ª–µ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å query –∏ #tag
    # –ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ '?' : type=tcp&security=reality&pbk=...#youtube-3z3gu7as
    query_and_tag = after_host.split('?', 1)[1] if '?' in after_host else ''
    # –†–∞–∑–¥–µ–ª–∏–º –ø–æ '#' (–µ—Å–ª–∏ –µ—Å—Ç—å), —á—Ç–æ–±—ã –¥–æ—Å—Ç–∞—Ç—å query –∏ –∏–º—è
    if '#' in query_and_tag:
        query_str, _tag = query_and_tag.split('#', 1)
    else:
        query_str = query_and_tag

    # –ü—Ä–µ–≤—Ä–∞—Ç–∏–º query-—Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
    # query_str: "type=tcp&security=reality&pbk=2Ddv9...&fp=chrome&sni=yahoo.com&sid=9263f9&spx=%2F&flow=xtls-rprx-vision"
    params = dict()
    for param in query_str.split('&'):
        if '=' in param:
            k, v = param.split('=', 1)
            params[k] = urllib.parse.unquote_plus(v)  # –†–∞—Å–∫–æ–¥–∏—Ä—É–µ–º %2F -> '/'

    # –î–æ—Å—Ç–∞—ë–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    net_type = params.get('type', 'tcp')               # –Ω–∞–ø—Ä–∏–º–µ—Ä "tcp" –∏–ª–∏ "grpc" –∏ —Ç.–ø.
    security = params.get('security', 'tls')           # –Ω–∞–ø—Ä–∏–º–µ—Ä "reality" / "tls" / ...
    public_key = params.get('pbk', '')
    fingerprint = params.get('fp', 'chrome')
    sni = params.get('sni', host)                      # –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä sni –Ω–µ –∑–∞–¥–∞–Ω, –±–µ—Ä–µ–º host
    short_id = params.get('sid', '')                   # –∫–æ—Ä–æ—Ç–∫–∏–π id
    spider_x = params.get('spx', '')                   # –ø—É—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
    flow = params.get('flow', '')                      # –Ω–∞–ø—Ä–∏–º–µ—Ä "xtls-rprx-vision"

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º JSON
    # 1. –ª–æ–≥
    # 2. inbounds ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ vmess: dokodemo-door
    # 3. outbounds ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª "vless"
    # 4. –î–ª—è security="reality" –∑–∞–¥–∞—ë–º realitySettings
    # 5. routing –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω vmess
    import json
    from bot_config import localportvless

    config_vless = {
        "log": {
            "access": "/opt/etc/v2ray/access.log",
            "error": "/opt/etc/v2ray/error.log",
            "loglevel": "info"
        },
        "inbounds": [
            {
                "port": int(localportvless),
                "listen": "::",  
                "protocol": "dokodemo-door",
                "settings": {
                    "network": "tcp",
                    "followRedirect": True
                },
                "sniffing": {
                    "enabled": True,
                    "destOverride": ["http", "tls"]
                }
            }
        ],
        "outbounds": [
            {
                "tag": "proxy",
                "domainStrategy": "UseIPv4",
                "protocol": "vless",
                "settings": {
                    "vnext": [
                        {
                            "address": host,
                            "port": int(port),
                            "users": [
                                {
                                    "id": uuid,
                                    "encryption": "none"
                                }
                            ]
                        }
                    ]
                },
                "streamSettings": {
                    "network": net_type,
                    "security": security
                },
            }
        ],
        "routing": {
            "domainStrategy": "IPIfNonMatch",
            "rules": [
                {
                    "type": "field",
                    "port": "0-65535",
                    "outboundTag": "proxy",
                    "enabled": True
                }
            ]
        }
    }

    # –ï—Å–ª–∏ –µ—Å—Ç—å flow ‚Äî –¥–æ–±–∞–≤–∏–º –≤ "users"
    if flow:
        config_vless["outbounds"][0]["settings"]["vnext"][0]["users"][0]["flow"] = flow

    # –ï—Å–ª–∏ security == "reality", —Ç–æ –¥–æ–±–∞–≤–∏–º realitySettings
    if security == "reality":
        # –í reality –Ω—É–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å publicKey, shortId, spiderX –∏ fingerprint
        realitySettings = {
            "show": False,
            "dest": f"{sni}:443",         # –ö—É–¥–∞ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º SNI
            "xver": 0,
            "serverNames": [sni],
            "fingerprint": fingerprint,
            "publicKey": public_key,      # pbk=...
            "shortId": short_id,
            "spiderX": spider_x
        }
        config_vless["outbounds"][0]["streamSettings"]["realitySettings"] = realitySettings

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ /opt/etc/v2ray/config.json
    with open('/opt/etc/v2ray/config.json', 'w', encoding='utf-8') as f:
        json.dump(config_vless, f, ensure_ascii=False, indent=2)

def trojan(key):
    # global appapiid, appapihash, password, localporttrojan
    key = key.split('//')[1]
    pw = key.split('@')[0]
    key = key.replace(pw + "@", "", 1)
    host = key.split(':')[0]
    key = key.replace(host + ":", "", 1)
    port = key.split('?')[0].split('#')[0]
    f = open('/opt/etc/trojan/config.json', 'w')
    sh = '{"run_type":"nat","local_addr":"::","local_port":' \
         + str(localporttrojan) + ',"remote_addr":"' + host + '","remote_port":' + port + \
         ',"password":["' + pw + '"],"ssl":{"verify":false,"verify_hostname":false}}'
    f.write(sh)
    f.close()

# bot.polling(none_stop=True)
try:
    bot.infinity_polling()
except Exception as err:
    fl = open("/opt/etc/error.log", "w")
    fl.write(str(err))
    fl.close()
